
temp_fibonacci.o:     file format elf32-sisa
temp_fibonacci.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000054 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000170 memsz 0x00000170 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000170  00000000  00000000  00000054  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000048c  00002000  00002000  000001c4  2**2  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003ec  0000248c  0000248c  00000650  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .sistema	00000000 .sistema
0000000e l       .sistema	00000000 __exit
00000022 l       .sistema	00000000 __pol1
0000002c l       .sistema	00000000 __pol2
00000000 g       .sistema	00000000 __entry_point
0000005c g     F .sistema	0000001e write_7segments
000000ce g     F .sistema	000000a2 main
00000046 g     F .sistema	00000016 read_switchs
0000007a g     F .sistema	00000054 fibonacci_recursiu
00000010 g     F .sistema	00000036 read_key_bloq


Disassembly of section .sistema:

00000000 <__entry_point>:
   0:	5e00 	movi	r7, 0
   2:	5f35 	movhi	r7, 53
   4:	5a0e 	movi	r5, 14
   6:	5b00 	movhi	r5, 0
   8:	5cce 	movi	r6, -50
   a:	5d00 	movhi	r6, 0
   c:	a183 	jmp	r6

0000000e <__exit>:
   e:	ffff 	halt	

00000010 <read_key_bloq>:
* Espera a que se pulse un pulsador (KEY) en la placa         *
* y devuelve el numero del pulsador apretado cuando se suelta *
**************************************************************/ 
int read_key_bloq (void)
{
  10:	2ff0 	addi	r7, r7, -16
  12:	4bc7 	st	14(r7), r5
  14:	4dc6 	st	12(r7), r6
  16:	2dcc 	addi	r6, r7, 12
  18:	45c1 	st	2(r7), r2
  1a:	47c0 	st	0(r7), r3
  // espera a que se pulse un pulsador y devuelve el numero del pulsador apretado.
  int res,aux1,aux2,aux3;

    /*
    polling1: in   r3, 7        ; leemos el estado de los pulsadores
              not  r3, r3       ; invertimos los bits ya que los pulsadores son activos a 0
              movi r1, 0x0F     ; mascara para quedarnos con los 4 bits de menor peso
              and  r1, r3, r1   ; nos quedamos con los 4 bits de los pulsadores
              bz   r1, polling1 ; si todos valen 0 nos quedamos esperando (bloqueando) a que se pulse uno. 
    pooling2: in   r3, 7        ; volvemos a leer el estado de los pulsadores
              not  r3, r3       ;
              movi r2, 0x0F     ;
              and  r2, r3, r2   ; nos quedamos con los 4 bits ya que no sabemos como esta implementado el registro hardware de los pulsadores
              bnz  r2, polling2 ; y esperamos hasta que no se pulse ninguno
    */

__asm__ (  
  1c:	37bd 	ld	r3, -6(r6)
  1e:	35be 	ld	r2, -4(r6)
  20:	33bf 	ld	r1, -2(r6)

00000022 <__pol1>:
  22:	7607 	in	r3, 7
  24:	06d8 	not	r3, r3
  26:	520f 	movi	r1, 15
  28:	02c1 	and	r1, r3, r1
  2a:	62fb 	bz	r1, -8	<__pol1>

0000002c <__pol2>:
  2c:	7607 	in	r3, 7
  2e:	06d8 	not	r3, r3
  30:	540f 	movi	r2, 15
  32:	04c2 	and	r2, r3, r2
  34:	65fb 	bnz	r2, -8	<__pol2>
  36:	43bc 	st	-8(r6), r1
        "__pol1: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %0, 15\n\t"
        "and %0, %1, %0\n\t"
        "bz %0, __pol1\n\t"      
        "__pol2: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %2, 15\n\t"
        "and %2, %1, %2\n\t"
        "bnz %2, __pol2\n\t"
        : "=r" (res)
        : "r" (aux1),
          "r" (aux2),
          "r" (aux3),
          "i" (7));              // Puerto 7 => Registro con el estado de los pulsadores (KEY)

    return res;
  38:	33bc 	ld	r1, -8(r6)
}
  3a:	35c1 	ld	r2, 2(r7)
  3c:	37c0 	ld	r3, 0(r7)
  3e:	3dc6 	ld	r6, 12(r7)
  40:	3bc7 	ld	r5, 14(r7)
  42:	2fd0 	addi	r7, r7, 16
  44:	a143 	jmp	r5

00000046 <read_switchs>:


/************************************************************
* Devuelve el estado actual de los interruptores (switch)   *
* de la placa DE1                                           *
************************************************************/ 
unsigned int read_switchs(void)
{
  46:	2ffa 	addi	r7, r7, -6
  48:	4bc2 	st	4(r7), r5
  4a:	4dc1 	st	2(r7), r6
  4c:	2dc2 	addi	r6, r7, 2
  unsigned int res;

  __asm__ ( "in %0, %1" 
  4e:	7208 	in	r1, 8
  50:	43bf 	st	-2(r6), r1
          : "=r" (res)
          : "i" (8));         // Puerto 8 => registro con el estado de los interruptores (SWITCH)

  return res;
  52:	33bf 	ld	r1, -2(r6)
}
  54:	3dc1 	ld	r6, 2(r7)
  56:	3bc2 	ld	r5, 4(r7)
  58:	2fc6 	addi	r7, r7, 6
  5a:	a143 	jmp	r5

0000005c <write_7segments>:
 

/*************************************************************
* Escribe en los visores 7 segmentos un valor hexadecimal    *
* y determina que visores estÃ¡n encendidos y cuales apagados *
*************************************************************/ 
int write_7segments(int valor, char control)
{
  5c:	2ff8 	addi	r7, r7, -8
  5e:	4bc3 	st	6(r7), r5
  60:	4dc2 	st	4(r7), r6
  62:	2dc4 	addi	r6, r7, 4
  64:	45c0 	st	0(r7), r2
    int res;

    __asm__ (
  66:	d586 	ldb	r2, 6(r6)
  68:	3382 	ld	r1, 4(r6)
  6a:	7509 	out	9, r2
  6c:	730a 	out	10, r1
        "out %0, %1\n\t"      // apagamos/encendemos los visores
        "out %2, %3\n\t"      // mostramos el valor
        : /* sin salidas*/
        : "i" (9),            // Puerto 9 => Control visores
          "r" (control),
          "i" (10),           // Puerto 10 => Valor visores
          "r" (valor));

    return res;
  6e:	33bf 	ld	r1, -2(r6)
}
  70:	35c0 	ld	r2, 0(r7)
  72:	3dc2 	ld	r6, 4(r7)
  74:	3bc3 	ld	r5, 6(r7)
  76:	2fc8 	addi	r7, r7, 8
  78:	a143 	jmp	r5

0000007a <fibonacci_recursiu>:


/* key codes */
#define KEY3      0x08
#define KEY2      0x04
#define KEY1      0x02
#define KEY0      0x01


unsigned int fibonacci_recursiu(unsigned int n)
{
  7a:	2ff6 	addi	r7, r7, -10
  7c:	4bc4 	st	8(r7), r5
  7e:	4dc3 	st	6(r7), r6
  80:	2dc6 	addi	r6, r7, 6
  82:	45c1 	st	2(r7), r2
  84:	47c0 	st	0(r7), r3
    if (n<2)
  86:	3382 	ld	r1, 4(r6)
  88:	5401 	movi	r2, 1
  8a:	126a 	cmpleu	r1, r1, r2
  8c:	6204 	bz	r1, 10
        return n;
  8e:	3382 	ld	r1, 4(r6)
  90:	43bf 	st	-2(r6), r1
  92:	5a00 	movi	r5, 0
  94:	6a15 	bz	r5, 44
    else
        return fibonacci_recursiu(n-1) + fibonacci_recursiu(n-2);
  96:	3382 	ld	r1, 4(r6)
  98:	247f 	addi	r2, r1, -1
  9a:	2ffe 	addi	r7, r7, -2
  9c:	23c0 	addi	r1, r7, 0
  9e:	4440 	st	0(r1), r2
  a0:	527a 	movi	r1, 122
  a2:	5300 	movhi	r1, 0
  a4:	aa44 	jal	r5, r1
  a6:	2fc2 	addi	r7, r7, 2
  a8:	2640 	addi	r3, r1, 0
  aa:	3382 	ld	r1, 4(r6)
  ac:	247e 	addi	r2, r1, -2
  ae:	2ffe 	addi	r7, r7, -2
  b0:	23c0 	addi	r1, r7, 0
  b2:	4440 	st	0(r1), r2
  b4:	527a 	movi	r1, 122
  b6:	5300 	movhi	r1, 0
  b8:	aa44 	jal	r5, r1
  ba:	2fc2 	addi	r7, r7, 2
  bc:	06e1 	add	r3, r3, r1
  be:	47bf 	st	-2(r6), r3
  c0:	33bf 	ld	r1, -2(r6)
}
  c2:	35c1 	ld	r2, 2(r7)
  c4:	37c0 	ld	r3, 0(r7)
  c6:	3dc3 	ld	r6, 6(r7)
  c8:	3bc4 	ld	r5, 8(r7)
  ca:	2fca 	addi	r7, r7, 10
  cc:	a143 	jmp	r5

000000ce <main>:

/*
 Muestra el valor de la secuencia de fibonaccio (en hexadecimal) por los visores de la placa
 a) calcula el valor de fibonacci de forma recursiva:
    Si se pulsa KEY1 se llama al fibonacci recursivo con el valor natural que este codificado en los 4 SWITCH de menor peso.

 b) calcula el valor del fibonacci de forma iterativa paso a paso
    Si se pulsa KEY3 se ponen la sucecions al inicio (primer valor)
    cada vez que se pulsa KEY2 muestra el siguiente valor de la sucesion
*/

int main (void)
{
  ce:	2ff0 	addi	r7, r7, -16
  d0:	4bc7 	st	14(r7), r5
  d2:	4dc6 	st	12(r7), r6
  d4:	2dcc 	addi	r6, r7, 12
  d6:	45c0 	st	0(r7), r2
    int pulsador;
    unsigned int interruptores;
    int fibonacci=0, anterior=0, actual=1;
  d8:	5200 	movi	r1, 0
  da:	43bd 	st	-6(r6), r1
  dc:	5200 	movi	r1, 0
  de:	43be 	st	-4(r6), r1
  e0:	5201 	movi	r1, 1
  e2:	43bf 	st	-2(r6), r1

    write_7segments(fibonacci, 0x0F);
  e4:	2ffc 	addi	r7, r7, -4
  e6:	25c0 	addi	r2, r7, 0
  e8:	33bd 	ld	r1, -6(r6)
  ea:	4280 	st	0(r2), r1
  ec:	520f 	movi	r1, 15
  ee:	e282 	stb	2(r2), r1
  f0:	525c 	movi	r1, 92
  f2:	5300 	movhi	r1, 0
  f4:	aa44 	jal	r5, r1
  f6:	2fc4 	addi	r7, r7, 4
    for (;;) {
        pulsador=read_key_bloq();
  f8:	5210 	movi	r1, 16
  fa:	5300 	movhi	r1, 0
  fc:	aa44 	jal	r5, r1
  fe:	43bb 	st	-10(r6), r1
        if (pulsador==KEY3) { //reset para el fibonacci interativo
 100:	35bb 	ld	r2, -10(r6)
 102:	5208 	movi	r1, 8
 104:	1299 	cmpeq	r1, r2, r1
 106:	6206 	bz	r1, 14
            fibonacci=0;
 108:	5200 	movi	r1, 0
 10a:	43bd 	st	-6(r6), r1
            anterior=0;
 10c:	5200 	movi	r1, 0
 10e:	43be 	st	-4(r6), r1
            actual=1;
 110:	5201 	movi	r1, 1
 112:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY2) { //siguiente sucesion del fibonacci iterativo
 114:	33bb 	ld	r1, -10(r6)
 116:	5404 	movi	r2, 4
 118:	125a 	cmpeq	r1, r1, r2
 11a:	6208 	bz	r1, 18
            fibonacci=actual+anterior;
 11c:	35bf 	ld	r2, -2(r6)
 11e:	33be 	ld	r1, -4(r6)
 120:	02a1 	add	r1, r2, r1
 122:	43bd 	st	-6(r6), r1
            anterior=actual;
 124:	33bf 	ld	r1, -2(r6)
 126:	43be 	st	-4(r6), r1
            actual=fibonacci;
 128:	33bd 	ld	r1, -6(r6)
 12a:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY1) { //llamada al fibonacci recursivo
 12c:	33bb 	ld	r1, -10(r6)
 12e:	5402 	movi	r2, 2
 130:	125a 	cmpeq	r1, r1, r2
 132:	6211 	bz	r1, 36
            interruptores=read_switchs();
 134:	5246 	movi	r1, 70
 136:	5300 	movhi	r1, 0
 138:	aa44 	jal	r5, r1
 13a:	43bc 	st	-8(r6), r1
            interruptores=interruptores & 0x000F; // limitamos el valor a 15 para que los numeros grandes no desborden la pila en las llamadas recursivas
 13c:	35bc 	ld	r2, -8(r6)
 13e:	520f 	movi	r1, 15
 140:	0281 	and	r1, r2, r1
 142:	43bc 	st	-8(r6), r1
            fibonacci=fibonacci_recursiu(interruptores);
 144:	2ffe 	addi	r7, r7, -2
 146:	25c0 	addi	r2, r7, 0
 148:	33bc 	ld	r1, -8(r6)
 14a:	4280 	st	0(r2), r1
 14c:	527a 	movi	r1, 122
 14e:	5300 	movhi	r1, 0
 150:	aa44 	jal	r5, r1
 152:	2fc2 	addi	r7, r7, 2
 154:	43bd 	st	-6(r6), r1
        }
        write_7segments(fibonacci, 0x0F);
 156:	2ffc 	addi	r7, r7, -4
 158:	25c0 	addi	r2, r7, 0
 15a:	33bd 	ld	r1, -6(r6)
 15c:	4280 	st	0(r2), r1
 15e:	520f 	movi	r1, 15
 160:	e282 	stb	2(r2), r1
 162:	525c 	movi	r1, 92
 164:	5300 	movhi	r1, 0
 166:	aa44 	jal	r5, r1
 168:	2fc4 	addi	r7, r7, 4
    }
 16a:	5af8 	movi	r5, -8
 16c:	5b00 	movhi	r5, 0
 16e:	a143 	jmp	r5

temp_fibonacci.o:     file format elf32-sisa
temp_fibonacci.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00000054 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000170 memsz 0x00000170 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000170  00000000  00000000  00000054  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000048c  00002000  00002000  000001c4  2**2  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003ec  0000248c  0000248c  00000650  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:


